check_code <- function(code, manual, R1_metadata, R2_metadata) {
#' Check the subject ID code and return corresponding Room 1 and Room 2 codes.
#'
#' @param code Type of code to use: "id", "id+comment", or "manual".
#' @param manual A list of custom codes for Room 1 and Room 2, required if `code` is "manual".
#' @param R1_metadata, R2_metadata DataFrames for metadata of Room 1 and Room 2, containing "Subject ID" and "Comments".
#' @return A list containing the codes for Room 1 and Room 2.
if (code == "id") {
code_1 <- R1_metadata$`Subject.ID`[1]
code_2 <- R2_metadata$`Subject.ID`[1]
} else if (code == "id+comment") {
code_1 <- paste0(R1_metadata$`Subject.ID`[1], '_', R1_metadata$`Comments`[1])
code_2 <- paste0(R2_metadata$`Subject.ID`[1], '_', R2_metadata$`Comments`[1])
} else if (code == "manual" && !is.null(manual)) {
code_1 <- manual[1]
code_2 <- manual[2]
} else {
stop("Invalid code parameter. Choose 'id', 'id+comment', or 'manual'.")
}
return(c(code_1, code_2))
}
check_code("id")
check_code <- function(code, manual, R1_metadata, R2_metadata) {
#' Check the subject ID code and return corresponding Room 1 and Room 2 codes.
#'
#' @param code Type of code to use: "id", "id+comment", or "manual".
#' @param manual A list of custom codes for Room 1 and Room 2, required if `code` is "manual".
#' @param R1_metadata, R2_metadata DataFrames for metadata of Room 1 and Room 2, containing "Subject ID" and "Comments".
#' @return A list containing the codes for Room 1 and Room 2.
if (code == "id") {
print("Hello")
code_1 <- R1_metadata$`Subject.ID`[1]
code_2 <- R2_metadata$`Subject.ID`[1]
} else if (code == "id+comment") {
code_1 <- paste0(R1_metadata$`Subject.ID`[1], '_', R1_metadata$`Comments`[1])
code_2 <- paste0(R2_metadata$`Subject.ID`[1], '_', R2_metadata$`Comments`[1])
} else if (code == "manual" && !is.null(manual)) {
code_1 <- manual[1]
code_2 <- manual[2]
} else {
stop("Invalid code parameter. Choose 'id', 'id+comment', or 'manual'.")
}
return(c(code_1, code_2))
}
check_code("id")
# source('config.R')
source('R/preprocessing.R')
setwd("/Users/au698484/Documents/WRIC_processing")
# source('config.R')
source('R/preprocessing.R')
library(RCurl)
# TODO: Check all cases - currently problem iwth converting end from notefile to POSIXct
no_comment_file = "/Users/au698484/Documents/data_wric_no_comment.txt" #"./example_data/data.txt"
result <- preprocess_WRIC_file(no_comment_file, code="id+comment", notefilepath="./example_data/note.txt")#, start="2023-11-13 11:43:00", end="2023-11-13 12:09:00") # "C:/Documents/WRIC_example_data/Main_note_yyyymmddxxxx.txt"
View(extract_meta_data)
